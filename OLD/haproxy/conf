
#
# dvv's way to configure haproxy
#

global

	#
	# process security
	#

	#chroot /usr/share/haproxy
	user haproxy
	group haproxy

	#
	# logging
	#

	log 127.0.0.1 local0
	debug
	#quiet

	#
	# concurrent connections limit
	#

	maxconn 32768

	#
	# distribute the health checks with a bit of randomness
	#

	spread-checks 5

defaults

	mode http
	option abortonclose
	no option accept-invalid-http-request
	no option accept-invalid-http-response
	option allbackups
	option dontlognull
	option forwardfor except 127.0.0.1 header X-Forwarded-For
	option httpchk GET /haproxy?monitor
	http-check disable-on-404
	log global
	option httplog
	option log-separate-errors
	option redispatch
	retries 3
	#?option splice-auto
	option tcp-smart-connect

frontend f_http

  bind 0.0.0.0:80
  default_backend b_http
  timeout client 25s
  monitor-uri /haproxy?alive
  acl site_dead nbsrv(dynamic) lt 2
  acl site_dead nbsrv(static)  lt 2
  monitor fail if site_dead

frontend f_https

  mode tcp
  bind 0.0.0.0:443
  default_backend b_https
  timeout client 25s
  #monitor-uri /haproxy?alive

backend b_http

	server s1 127.0.0.1:3001 check cookie s1
	server s2 127.0.0.1:3002 check cookie s2
	server s3 127.0.0.1:3003 check cookie s3
	server s4 127.0.0.1:3004 check backup

	#
	# balance the load
	#

	balance leastconn

	#
	# cookie persistence
	#

	cookie SERVERID insert indirect postonly

	#
	# workers setup
	#

	fullconn 10000
	default-server weight 50 maxqueue 16384 minconn 512 maxconn 16384 slowstart 1000 inter 5000 fastinter 500 downinter 10000 rise 2 fall 3

	#
	# admin interface
	#

	stats enable
	stats uri /haproxy?stats
	stats hide-version
	#stats refresh 3s
	stats admin if LOCALHOST

	#
	# timeouts
	#

	option forceclose

	#
	# server must be contacted within 5 seconds
	#

	timeout connect 5s

	#
	# all headers must arrive within 3 seconds
	#

	timeout http-request 3s

	#
	# server must respond within 25 seconds
	# N.B. should equal client timeout in frontend
	#

	timeout server 25s

	#
	# don't close connection for 1 ms
	# helps to glue several short requests in one session
	# N.B. >10 can dramatically slow down short requests
	#

	timeout http-keep-alive 1

#
# learn SSL session ID from both request and response and create affinity
#

backend b_https

  mode tcp
  balance roundrobin

  # maximum SSL session ID length is 32 bytes.
  stick-table type binary len 32 size 30k expire 30m

  acl clienthello req_ssl_hello_type 1
  acl serverhello rep_ssl_hello_type 2

  # use tcp content accepts to detects ssl client and server hello.
  tcp-request inspect-delay 5s
  tcp-request content accept if clienthello

  # no timeout on response inspect delay by default.
  tcp-response content accept if serverhello

  # SSL session ID (SSLID) may be present on a client or server hello.
  # Its length is coded on 1 byte at offset 43 and its value starts
  # at offset 44.
  # Match and learn on request if client hello.
  stick on payload_lv(43,1) if clienthello

  # Learn on response if server hello.
  stick store-response payload_lv(43,1) if serverhello

  server s1 127.0.0.1:64443
  #server s2 127.0.0.1:64444
  #server s3 127.0.0.1:64445
  #server s4 127.0.0.1:64446

  timeout connect 5s
  timeout server 25s
